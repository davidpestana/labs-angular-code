/* tslint:disable */
/* eslint-disable */
/**
 * Solar Monitor API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Alert,
  Plant,
} from '../models/index';
import {
    AlertFromJSON,
    AlertToJSON,
    PlantFromJSON,
    PlantToJSON,
} from '../models/index';

export interface ApiAlertsPostRequest {
    alert: Alert;
}

export interface ApiPlantsIdGetRequest {
    id: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Lista de alertas activas
     */
    async apiAlertsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Alert>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/alerts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AlertFromJSON));
    }

    /**
     * Lista de alertas activas
     */
    async apiAlertsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Alert>> {
        const response = await this.apiAlertsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Crear una alerta
     */
    async apiAlertsPostRaw(requestParameters: ApiAlertsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['alert'] == null) {
            throw new runtime.RequiredError(
                'alert',
                'Required parameter "alert" was null or undefined when calling apiAlertsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/alerts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AlertToJSON(requestParameters['alert']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Crear una alerta
     */
    async apiAlertsPost(requestParameters: ApiAlertsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiAlertsPostRaw(requestParameters, initOverrides);
    }

    /**
     * Lista de plantas solares
     */
    async apiPlantsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Plant>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/plants`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PlantFromJSON));
    }

    /**
     * Lista de plantas solares
     */
    async apiPlantsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Plant>> {
        const response = await this.apiPlantsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Obtener planta por ID
     */
    async apiPlantsIdGetRaw(requestParameters: ApiPlantsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Plant>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiPlantsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/plants/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlantFromJSON(jsonValue));
    }

    /**
     * Obtener planta por ID
     */
    async apiPlantsIdGet(requestParameters: ApiPlantsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Plant> {
        const response = await this.apiPlantsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
